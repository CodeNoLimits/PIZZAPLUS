
import React, { useState, useEffect, useRef } from 'react';
import { Message, Translations } from '../types';

interface ChatWidgetProps {
  isOpen: boolean;
  onClose: () => void;
  messages: Message[];
  onSendMessage: (text: string) => void;
  translations: Translations;
}

export const ChatWidget: React.FC<ChatWidgetProps> = ({ isOpen, onClose, messages, onSendMessage, translations }) => {
  const [inputText, setInputText] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);


  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(scrollToBottom, [messages]);
  
  useEffect(() => {
    if (isOpen) {
        // Focus input when chat opens
        setTimeout(() => inputRef.current?.focus(), 100);
    }
  }, [isOpen]);


  if (!isOpen) return null;

  const handleSend = () => {
    if (inputText.trim()) {
      onSendMessage(inputText);
      setInputText('');
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault(); // Prevent newline in input
      handleSend();
    }
  };

  return (
    <div 
      className="fixed bottom-20 md:bottom-24 right-5 md:right-5 z-[1001] w-[350px] max-w-[90vw] h-[500px] bg-zinc-800 border border-zinc-700 rounded-xl shadow-2xl flex flex-col"
      role="dialog"
      aria-modal="true"
      aria-labelledby="chat-widget-title"
    >
      <div className="p-3 bg-gradient-to-r from-blue-600 to-blue-500 rounded-t-xl flex justify-between items-center">
        <div className="flex items-center">
            <i className="fas fa-robot text-white text-xl mr-2"></i>
            <h3 id="chat-widget-title" className="text-lg font-semibold text-white">{translations.chatTitle}</h3>
        </div>
        <button onClick={onClose} className="text-white text-xl hover:text-gray-200 p-1" aria-label={translations.close}>&times;</button>
      </div>
      <div id="chat-messages" className="flex-grow p-4 overflow-y-auto flex flex-col space-y-3 scrollbar-thin scrollbar-thumb-zinc-600 scrollbar-track-zinc-700">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className={`message p-2.5 rounded-lg max-w-[85%] break-words text-sm shadow
              ${msg.sender === 'user' 
                ? 'bg-[#FF6347] text-white self-end ml-auto rounded-br-none' 
                : 'bg-zinc-700 text-gray-200 self-start mr-auto rounded-bl-none flex items-start'
              }`}
          >
            {msg.sender === 'gemini' && <i className="fas fa-sparkles text-yellow-400 text-xs mr-2 mt-1 flex-shrink-0"></i>}
            <span className="whitespace-pre-wrap">{msg.text}</span>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>
      <div className="p-3 border-t border-zinc-700 flex items-center bg-zinc-800 rounded-b-xl">
        <input
          ref={inputRef}
          type="text"
          id="chat-input"
          value={inputText}
          onChange={(e) => setInputText(e.target.value)}
          onKeyPress={handleKeyPress}
          className="flex-grow bg-zinc-700 border-none rounded-lg p-2.5 text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder={translations.chatPlaceholder}
        />
        <button
          id="chat-send"
          onClick={handleSend}
          className="ml-2 p-2.5 text-white bg-blue-500 hover:bg-blue-600 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-zinc-800 focus:ring-blue-500"
          aria-label={translations.chatSend}
        >
          <i className="fas fa-paper-plane"></i>
        </button>
      </div>
    </div>
  );
};
